/* This is an autogenerated file, do not edit. */

zx_time_t zx_clock_get(uint32_t clock_id)
{
    ZX_SYSCALL_SEND(ZX_SYS_CLOCK_GET, 1, clock_id);
    return seL4_GetMR(0);
}

zx_status_t zx_nanosleep(zx_time_t deadline)
{
    ZX_SYSCALL_SEND(ZX_SYS_NANOSLEEP, 1, deadline);
    return seL4_GetMR(0);
}

uint64_t zx_ticks_per_second(void)
{
    ZX_SYSCALL_SEND(ZX_SYS_TICKS_PER_SECOND, 0);
    return seL4_GetMR(0);
}

zx_status_t zx_clock_adjust(zx_handle_t handle, uint32_t clock_id, int64_t offset)
{
    ZX_SYSCALL_SEND(ZX_SYS_CLOCK_ADJUST, 3, handle, clock_id, offset);
    return seL4_GetMR(0);
}

uint32_t zx_system_get_num_cpus(void)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSTEM_GET_NUM_CPUS, 0);
    return seL4_GetMR(0);
}

zx_status_t zx_system_get_version(char* version, uint32_t version_len)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSTEM_GET_VERSION, 2, version, version_len);
    return seL4_GetMR(0);
}

uint64_t zx_system_get_physmem(void)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSTEM_GET_PHYSMEM, 0);
    return seL4_GetMR(0);
}

zx_status_t zx_system_get_features(uint32_t kind, uint32_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSTEM_GET_FEATURES, 2, kind, out);
    return seL4_GetMR(0);
}

zx_status_t zx_handle_close(zx_handle_t handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_HANDLE_CLOSE, 1, handle);
    return seL4_GetMR(0);
}

zx_status_t zx_handle_duplicate(zx_handle_t handle, zx_rights_t rights, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_HANDLE_DUPLICATE, 3, handle, rights, out);
    return seL4_GetMR(0);
}

zx_status_t zx_handle_replace(zx_handle_t handle, zx_rights_t rights, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_HANDLE_REPLACE, 3, handle, rights, out);
    return seL4_GetMR(0);
}

zx_status_t zx_object_wait_one(zx_handle_t handle, zx_signals_t waitfor, zx_time_t deadline, zx_signals_t* observed)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_WAIT_ONE, 4, handle, waitfor, deadline, observed);
    return seL4_GetMR(0);
}

zx_status_t zx_object_wait_many(zx_wait_item_t* items, uint32_t count, zx_time_t deadline)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_WAIT_MANY, 3, items, count, deadline);
    return seL4_GetMR(0);
}

zx_status_t zx_object_wait_async(zx_handle_t handle, zx_handle_t port_handle, uint64_t key, zx_signals_t signals, uint32_t options)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_WAIT_ASYNC, 5, handle, port_handle, key, signals, options);
    return seL4_GetMR(0);
}

zx_status_t zx_object_signal(zx_handle_t handle, uint32_t clear_mask, uint32_t set_mask)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_SIGNAL, 3, handle, clear_mask, set_mask);
    return seL4_GetMR(0);
}

zx_status_t zx_object_signal_peer(zx_handle_t handle, uint32_t clear_mask, uint32_t set_mask)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_SIGNAL_PEER, 3, handle, clear_mask, set_mask);
    return seL4_GetMR(0);
}

zx_status_t zx_object_get_property(zx_handle_t handle, uint32_t property, void* value, size_t size)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_GET_PROPERTY, 4, handle, property, value, size);
    return seL4_GetMR(0);
}

zx_status_t zx_object_set_property(zx_handle_t handle, uint32_t property, void* value, size_t size)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_SET_PROPERTY, 4, handle, property, value, size);
    return seL4_GetMR(0);
}

zx_status_t zx_object_set_cookie(zx_handle_t handle, zx_handle_t scope, uint64_t cookie)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_SET_COOKIE, 3, handle, scope, cookie);
    return seL4_GetMR(0);
}

zx_status_t zx_object_get_cookie(zx_handle_t handle, zx_handle_t scope, uint64_t* cookie)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_GET_COOKIE, 3, handle, scope, cookie);
    return seL4_GetMR(0);
}

zx_status_t zx_object_get_info(zx_handle_t handle, uint32_t topic, void* buffer, size_t buffer_size, size_t* actual_count, size_t* avail_count)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_GET_INFO, 6, handle, topic, buffer, buffer_size, actual_count, avail_count);
    return seL4_GetMR(0);
}

zx_status_t zx_object_get_child(zx_handle_t handle, uint64_t koid, zx_rights_t rights, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_OBJECT_GET_CHILD, 4, handle, koid, rights, out);
    return seL4_GetMR(0);
}

zx_status_t zx_channel_create(uint32_t options, zx_handle_t* out0, zx_handle_t* out1)
{
    ZX_SYSCALL_SEND(ZX_SYS_CHANNEL_CREATE, 3, options, out0, out1);
    return seL4_GetMR(0);
}

zx_status_t zx_channel_read(zx_handle_t handle, uint32_t options, void* bytes, zx_handle_t* handles, uint32_t num_bytes, uint32_t num_handles, uint32_t* actual_bytes, uint32_t* actual_handles)
{
    ZX_SYSCALL_SEND(ZX_SYS_CHANNEL_READ, 8, handle, options, bytes, handles, num_bytes, num_handles, actual_bytes, actual_handles);
    return seL4_GetMR(0);
}

zx_status_t zx_channel_read_etc(zx_handle_t handle, uint32_t options, void* bytes, zx_handle_info_t* handles, uint32_t num_bytes, uint32_t num_handles, uint32_t* actual_bytes, uint32_t* actual_handles)
{
    ZX_SYSCALL_SEND(ZX_SYS_CHANNEL_READ_ETC, 8, handle, options, bytes, handles, num_bytes, num_handles, actual_bytes, actual_handles);
    return seL4_GetMR(0);
}

zx_status_t zx_channel_write(zx_handle_t handle, uint32_t options, void* bytes, uint32_t num_bytes, zx_handle_t* handles, uint32_t num_handles)
{
    ZX_SYSCALL_SEND(ZX_SYS_CHANNEL_WRITE, 6, handle, options, bytes, num_bytes, handles, num_handles);
    return seL4_GetMR(0);
}

zx_status_t zx_channel_call(zx_handle_t handle, uint32_t options, zx_time_t deadline, zx_channel_call_args_t* args, uint32_t* actual_bytes, uint32_t* actual_handles, zx_status_t* read_status)
{
    ZX_SYSCALL_SEND(ZX_SYS_CHANNEL_CALL, 7, handle, options, deadline, args, actual_bytes, actual_handles, read_status);
    return seL4_GetMR(0);
}

zx_status_t zx_socket_create(uint32_t options, zx_handle_t* out0, zx_handle_t* out1)
{
    ZX_SYSCALL_SEND(ZX_SYS_SOCKET_CREATE, 3, options, out0, out1);
    return seL4_GetMR(0);
}

zx_status_t zx_socket_write(zx_handle_t handle, uint32_t options, void* buffer, size_t size, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_SOCKET_WRITE, 5, handle, options, buffer, size, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_socket_read(zx_handle_t handle, uint32_t options, void* buffer, size_t size, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_SOCKET_READ, 5, handle, options, buffer, size, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_socket_share(zx_handle_t handle, zx_handle_t socket_to_share)
{
    ZX_SYSCALL_SEND(ZX_SYS_SOCKET_SHARE, 2, handle, socket_to_share);
    return seL4_GetMR(0);
}

zx_status_t zx_socket_accept(zx_handle_t handle, zx_handle_t* out_socket)
{
    ZX_SYSCALL_SEND(ZX_SYS_SOCKET_ACCEPT, 2, handle, out_socket);
    return seL4_GetMR(0);
}

void zx_thread_exit(void)
{
    ZX_SYSCALL_SEND(ZX_SYS_THREAD_EXIT, 0);
}

zx_status_t zx_thread_create(zx_handle_t process, const char* name, uint32_t name_len, uint32_t options, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_THREAD_CREATE, 5, process, name, name_len, options, out);
    return seL4_GetMR(0);
}

zx_status_t zx_thread_start(zx_handle_t handle, uintptr_t thread_entry, uintptr_t stack, uintptr_t arg1, uintptr_t arg2)
{
    ZX_SYSCALL_SEND(ZX_SYS_THREAD_START, 5, handle, thread_entry, stack, arg1, arg2);
    return seL4_GetMR(0);
}

zx_status_t zx_thread_read_state(zx_handle_t handle, uint32_t kind, void* buffer, size_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_THREAD_READ_STATE, 4, handle, kind, buffer, len);
    return seL4_GetMR(0);
}

zx_status_t zx_thread_write_state(zx_handle_t handle, uint32_t kind, void* buffer, size_t buffer_len)
{
    ZX_SYSCALL_SEND(ZX_SYS_THREAD_WRITE_STATE, 4, handle, kind, buffer, buffer_len);
    return seL4_GetMR(0);
}

zx_status_t zx_thread_set_priority(int32_t prio)
{
    ZX_SYSCALL_SEND(ZX_SYS_THREAD_SET_PRIORITY, 1, prio);
    return seL4_GetMR(0);
}

void zx_process_exit(int retcode)
{
    ZX_SYSCALL_SEND(ZX_SYS_PROCESS_EXIT, 1, retcode);
}

zx_status_t zx_process_create(zx_handle_t job, const char* name, uint32_t name_len, uint32_t options, zx_handle_t* proc_handle, zx_handle_t* vmar_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_PROCESS_CREATE, 6, job, name, name_len, options, proc_handle, vmar_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_process_start(zx_handle_t process_handle, zx_handle_t thread_handle, uintptr_t entry, uintptr_t stack, zx_handle_t arg_handle, uintptr_t arg2)
{
    ZX_SYSCALL_SEND(ZX_SYS_PROCESS_START, 6, process_handle, thread_handle, entry, stack, arg_handle, arg2);
    return seL4_GetMR(0);
}

zx_status_t zx_process_read_memory(zx_handle_t proc, uintptr_t vaddr, void* buffer, size_t len, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_PROCESS_READ_MEMORY, 5, proc, vaddr, buffer, len, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_process_write_memory(zx_handle_t proc, uintptr_t vaddr, void* buffer, size_t len, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_PROCESS_WRITE_MEMORY, 5, proc, vaddr, buffer, len, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_job_create(zx_handle_t parent_job, uint32_t options, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_JOB_CREATE, 3, parent_job, options, out);
    return seL4_GetMR(0);
}

zx_status_t zx_job_set_policy(zx_handle_t job, uint32_t options, uint32_t topic, void* policy, uint32_t count)
{
    ZX_SYSCALL_SEND(ZX_SYS_JOB_SET_POLICY, 5, job, options, topic, policy, count);
    return seL4_GetMR(0);
}

zx_status_t zx_task_bind_exception_port(zx_handle_t object, zx_handle_t eport, uint64_t key, uint32_t options)
{
    ZX_SYSCALL_SEND(ZX_SYS_TASK_BIND_EXCEPTION_PORT, 4, object, eport, key, options);
    return seL4_GetMR(0);
}

zx_status_t zx_task_suspend(zx_handle_t task_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_TASK_SUSPEND, 1, task_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_task_resume(zx_handle_t task_handle, uint32_t options)
{
    ZX_SYSCALL_SEND(ZX_SYS_TASK_RESUME, 2, task_handle, options);
    return seL4_GetMR(0);
}

zx_status_t zx_task_kill(zx_handle_t task_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_TASK_KILL, 1, task_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_event_create(uint32_t options, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_EVENT_CREATE, 2, options, out);
    return seL4_GetMR(0);
}

zx_status_t zx_eventpair_create(uint32_t options, zx_handle_t* out0, zx_handle_t* out1)
{
    ZX_SYSCALL_SEND(ZX_SYS_EVENTPAIR_CREATE, 3, options, out0, out1);
    return seL4_GetMR(0);
}

zx_status_t zx_futex_wait(zx_futex_t* value_ptr, int current_value, zx_time_t deadline)
{
    ZX_SYSCALL_SEND(ZX_SYS_FUTEX_WAIT, 3, value_ptr, current_value, deadline);
    return seL4_GetMR(0);
}

zx_status_t zx_futex_wake(zx_futex_t* value_ptr, uint32_t count)
{
    ZX_SYSCALL_SEND(ZX_SYS_FUTEX_WAKE, 2, value_ptr, count);
    return seL4_GetMR(0);
}

zx_status_t zx_futex_requeue(zx_futex_t* wake_ptr, uint32_t wake_count, int current_value, zx_futex_t* requeue_ptr, uint32_t requeue_count)
{
    ZX_SYSCALL_SEND(ZX_SYS_FUTEX_REQUEUE, 5, wake_ptr, wake_count, current_value, requeue_ptr, requeue_count);
    return seL4_GetMR(0);
}

zx_status_t zx_port_create(uint32_t options, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_PORT_CREATE, 2, options, out);
    return seL4_GetMR(0);
}

zx_status_t zx_port_queue(zx_handle_t handle, zx_port_packet_t* packet, size_t count)
{
    ZX_SYSCALL_SEND(ZX_SYS_PORT_QUEUE, 3, handle, packet, count);
    return seL4_GetMR(0);
}

zx_status_t zx_port_wait(zx_handle_t handle, zx_time_t deadline, zx_port_packet_t* packet, size_t count)
{
    ZX_SYSCALL_SEND(ZX_SYS_PORT_WAIT, 4, handle, deadline, packet, count);
    return seL4_GetMR(0);
}

zx_status_t zx_port_cancel(zx_handle_t handle, zx_handle_t source, uint64_t key)
{
    ZX_SYSCALL_SEND(ZX_SYS_PORT_CANCEL, 3, handle, source, key);
    return seL4_GetMR(0);
}

zx_status_t zx_timer_create(uint32_t options, uint32_t clock_id, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_TIMER_CREATE, 3, options, clock_id, out);
    return seL4_GetMR(0);
}

zx_status_t zx_timer_set(zx_handle_t handle, zx_time_t deadline, zx_duration_t slack)
{
    ZX_SYSCALL_SEND(ZX_SYS_TIMER_SET, 3, handle, deadline, slack);
    return seL4_GetMR(0);
}

zx_status_t zx_timer_cancel(zx_handle_t handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_TIMER_CANCEL, 1, handle);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_create(uint64_t size, uint32_t options, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_CREATE, 3, size, options, out);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_read(zx_handle_t handle, void* data, uint64_t offset, size_t len, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_READ, 5, handle, data, offset, len, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_write(zx_handle_t handle, void* data, uint64_t offset, size_t len, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_WRITE, 5, handle, data, offset, len, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_get_size(zx_handle_t handle, uint64_t* size)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_GET_SIZE, 2, handle, size);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_set_size(zx_handle_t handle, uint64_t size)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_SET_SIZE, 2, handle, size);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_op_range(zx_handle_t handle, uint32_t op, uint64_t offset, uint64_t size, void* buffer, size_t buffer_size)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_OP_RANGE, 6, handle, op, offset, size, buffer, buffer_size);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_clone(zx_handle_t handle, uint32_t options, uint64_t offset, uint64_t size, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_CLONE, 5, handle, options, offset, size, out);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_set_cache_policy(zx_handle_t handle, uint32_t cache_policy)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_SET_CACHE_POLICY, 2, handle, cache_policy);
    return seL4_GetMR(0);
}

zx_status_t zx_vmar_allocate(zx_handle_t parent_vmar_handle, size_t offset, size_t size, uint32_t map_flags, zx_handle_t* child_vmar, uintptr_t* child_addr)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMAR_ALLOCATE, 6, parent_vmar_handle, offset, size, map_flags, child_vmar, child_addr);
    return seL4_GetMR(0);
}

zx_status_t zx_vmar_destroy(zx_handle_t vmar_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMAR_DESTROY, 1, vmar_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_vmar_map(zx_handle_t vmar_handle, size_t vmar_offset, zx_handle_t vmo_handle, uint64_t vmo_offset, size_t len, uint32_t map_flags, uintptr_t* mapped_addr)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMAR_MAP, 7, vmar_handle, vmar_offset, vmo_handle, vmo_offset, len, map_flags, mapped_addr);
    return seL4_GetMR(0);
}

zx_status_t zx_vmar_unmap(zx_handle_t vmar_handle, uintptr_t addr, size_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMAR_UNMAP, 3, vmar_handle, addr, len);
    return seL4_GetMR(0);
}

zx_status_t zx_vmar_protect(zx_handle_t vmar_handle, uintptr_t addr, size_t len, uint32_t prot_flags)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMAR_PROTECT, 4, vmar_handle, addr, len, prot_flags);
    return seL4_GetMR(0);
}

zx_status_t zx_cprng_draw(void* buffer, size_t len, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_CPRNG_DRAW, 3, buffer, len, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_cprng_add_entropy(void* buffer, size_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_CPRNG_ADD_ENTROPY, 2, buffer, len);
    return seL4_GetMR(0);
}

zx_status_t zx_fifo_create(uint32_t elem_count, uint32_t elem_size, uint32_t options, zx_handle_t* out0, zx_handle_t* out1)
{
    ZX_SYSCALL_SEND(ZX_SYS_FIFO_CREATE, 5, elem_count, elem_size, options, out0, out1);
    return seL4_GetMR(0);
}

zx_status_t zx_fifo_read(zx_handle_t handle, void* data, size_t len, uint32_t* num_written)
{
    ZX_SYSCALL_SEND(ZX_SYS_FIFO_READ, 4, handle, data, len, num_written);
    return seL4_GetMR(0);
}

zx_status_t zx_fifo_write(zx_handle_t handle, void* data, size_t len, uint32_t* num_written)
{
    ZX_SYSCALL_SEND(ZX_SYS_FIFO_WRITE, 4, handle, data, len, num_written);
    return seL4_GetMR(0);
}

zx_status_t zx_vmar_unmap_handle_close_thread_exit(zx_handle_t vmar_handle, uintptr_t addr, size_t len, zx_handle_t handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMAR_UNMAP_HANDLE_CLOSE_THREAD_EXIT, 4, vmar_handle, addr, len, handle);
    return seL4_GetMR(0);
}

void zx_futex_wake_handle_close_thread_exit(zx_futex_t* value_ptr, uint32_t count, int new_value, zx_handle_t handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_FUTEX_WAKE_HANDLE_CLOSE_THREAD_EXIT, 4, value_ptr, count, new_value, handle);
}

zx_status_t zx_log_create(uint32_t options, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_LOG_CREATE, 2, options, out);
    return seL4_GetMR(0);
}

zx_status_t zx_log_write(zx_handle_t handle, uint32_t len, void* buffer, uint32_t options)
{
    ZX_SYSCALL_SEND(ZX_SYS_LOG_WRITE, 4, handle, len, buffer, options);
    return seL4_GetMR(0);
}

zx_status_t zx_log_read(zx_handle_t handle, uint32_t len, void* buffer, uint32_t options)
{
    ZX_SYSCALL_SEND(ZX_SYS_LOG_READ, 4, handle, len, buffer, options);
    return seL4_GetMR(0);
}

zx_status_t zx_debuglog_create(zx_handle_t resource, uint32_t options, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_DEBUGLOG_CREATE, 3, resource, options, out);
    return seL4_GetMR(0);
}

zx_status_t zx_debuglog_write(zx_handle_t handle, uint32_t options, void* buffer, size_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_DEBUGLOG_WRITE, 4, handle, options, buffer, len);
    return seL4_GetMR(0);
}

zx_status_t zx_debuglog_read(zx_handle_t handle, uint32_t options, void* buffer, size_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_DEBUGLOG_READ, 4, handle, options, buffer, len);
    return seL4_GetMR(0);
}

zx_status_t zx_ktrace_read(zx_handle_t handle, void* data, uint32_t offset, uint32_t len, uint32_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_KTRACE_READ, 5, handle, data, offset, len, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_ktrace_control(zx_handle_t handle, uint32_t action, uint32_t options, void* ptr)
{
    ZX_SYSCALL_SEND(ZX_SYS_KTRACE_CONTROL, 4, handle, action, options, ptr);
    return seL4_GetMR(0);
}

zx_status_t zx_ktrace_write(zx_handle_t handle, uint32_t id, uint32_t arg0, uint32_t arg1)
{
    ZX_SYSCALL_SEND(ZX_SYS_KTRACE_WRITE, 4, handle, id, arg0, arg1);
    return seL4_GetMR(0);
}

zx_status_t zx_mtrace_control(zx_handle_t handle, uint32_t kind, uint32_t action, uint32_t options, void* ptr, uint32_t size)
{
    ZX_SYSCALL_SEND(ZX_SYS_MTRACE_CONTROL, 6, handle, kind, action, options, ptr, size);
    return seL4_GetMR(0);
}

zx_status_t zx_debug_read(zx_handle_t handle, void* buffer, uint32_t length)
{
    ZX_SYSCALL_SEND(ZX_SYS_DEBUG_READ, 3, handle, buffer, length);
    return seL4_GetMR(0);
}

zx_status_t zx_debug_write(void* buffer, uint32_t length)
{
    ZX_SYSCALL_SEND(ZX_SYS_DEBUG_WRITE, 2, buffer, length);
    return seL4_GetMR(0);
}

zx_status_t zx_debug_send_command(zx_handle_t resource_handle, void* buffer, uint32_t length)
{
    ZX_SYSCALL_SEND(ZX_SYS_DEBUG_SEND_COMMAND, 3, resource_handle, buffer, length);
    return seL4_GetMR(0);
}

zx_status_t zx_interrupt_create(zx_handle_t hrsrc, uint32_t options, zx_handle_t* out_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_INTERRUPT_CREATE, 3, hrsrc, options, out_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_interrupt_bind(zx_handle_t handle, uint32_t slot, zx_handle_t hrsrc, uint32_t vector, uint32_t options)
{
    ZX_SYSCALL_SEND(ZX_SYS_INTERRUPT_BIND, 5, handle, slot, hrsrc, vector, options);
    return seL4_GetMR(0);
}

zx_status_t zx_interrupt_wait(zx_handle_t handle, uint64_t* slots)
{
    ZX_SYSCALL_SEND(ZX_SYS_INTERRUPT_WAIT, 2, handle, slots);
    return seL4_GetMR(0);
}

zx_status_t zx_interrupt_get_timestamp(zx_handle_t handle, uint32_t slot, zx_time_t* timestamp)
{
    ZX_SYSCALL_SEND(ZX_SYS_INTERRUPT_GET_TIMESTAMP, 3, handle, slot, timestamp);
    return seL4_GetMR(0);
}

zx_status_t zx_interrupt_signal(zx_handle_t handle, uint32_t slot, zx_time_t timestamp)
{
    ZX_SYSCALL_SEND(ZX_SYS_INTERRUPT_SIGNAL, 3, handle, slot, timestamp);
    return seL4_GetMR(0);
}

zx_status_t zx_mmap_device_io(zx_handle_t handle, uint32_t io_addr, uint32_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_MMAP_DEVICE_IO, 3, handle, io_addr, len);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_create_contiguous(zx_handle_t rsrc_handle, size_t size, uint32_t alignment_log2, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_CREATE_CONTIGUOUS, 4, rsrc_handle, size, alignment_log2, out);
    return seL4_GetMR(0);
}

zx_status_t zx_vmo_create_physical(zx_handle_t rsrc_handle, zx_paddr_t paddr, size_t size, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_VMO_CREATE_PHYSICAL, 4, rsrc_handle, paddr, size, out);
    return seL4_GetMR(0);
}

zx_status_t zx_iommu_create(zx_handle_t rsrc_handle, uint32_t type, void* desc, uint32_t desc_len, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_IOMMU_CREATE, 5, rsrc_handle, type, desc, desc_len, out);
    return seL4_GetMR(0);
}

zx_status_t zx_bti_create(zx_handle_t iommu, uint32_t options, uint64_t bti_id, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_BTI_CREATE, 4, iommu, options, bti_id, out);
    return seL4_GetMR(0);
}

zx_status_t zx_bti_pin(zx_handle_t bti, zx_handle_t vmo, uint64_t offset, uint64_t size, uint32_t perms, zx_paddr_t* addrs, size_t addrs_len, size_t* actual)
{
    ZX_SYSCALL_SEND(ZX_SYS_BTI_PIN, 8, bti, vmo, offset, size, perms, addrs, addrs_len, actual);
    return seL4_GetMR(0);
}

zx_status_t zx_bti_unpin(zx_handle_t bti, zx_paddr_t base_addr)
{
    ZX_SYSCALL_SEND(ZX_SYS_BTI_UNPIN, 2, bti, base_addr);
    return seL4_GetMR(0);
}

zx_status_t zx_bootloader_fb_get_info(uint32_t* format, uint32_t* width, uint32_t* height, uint32_t* stride)
{
    ZX_SYSCALL_SEND(ZX_SYS_BOOTLOADER_FB_GET_INFO, 4, format, width, height, stride);
    return seL4_GetMR(0);
}

zx_status_t zx_set_framebuffer(zx_handle_t handle, void* vaddr, uint32_t len, uint32_t format, uint32_t width, uint32_t height, uint32_t stride)
{
    ZX_SYSCALL_SEND(ZX_SYS_SET_FRAMEBUFFER, 7, handle, vaddr, len, format, width, height, stride);
    return seL4_GetMR(0);
}

zx_status_t zx_set_framebuffer_vmo(zx_handle_t handle, zx_handle_t vmo, uint32_t len, uint32_t format, uint32_t width, uint32_t height, uint32_t stride)
{
    ZX_SYSCALL_SEND(ZX_SYS_SET_FRAMEBUFFER_VMO, 7, handle, vmo, len, format, width, height, stride);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_get_nth_device(zx_handle_t handle, uint32_t index, zx_pcie_device_info_t* out_info, zx_handle_t* out_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_GET_NTH_DEVICE, 4, handle, index, out_info, out_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_enable_bus_master(zx_handle_t handle, bool enable)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_ENABLE_BUS_MASTER, 2, handle, enable);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_reset_device(zx_handle_t handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_RESET_DEVICE, 1, handle);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_config_read(zx_handle_t handle, uint16_t offset, size_t width, uint32_t* out_val)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_CONFIG_READ, 4, handle, offset, width, out_val);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_config_write(zx_handle_t handle, uint16_t offset, size_t width, uint32_t val)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_CONFIG_WRITE, 4, handle, offset, width, val);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_cfg_pio_rw(zx_handle_t handle, uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint32_t* val, size_t width, bool write)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_CFG_PIO_RW, 8, handle, bus, dev, func, offset, val, width, write);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_get_bar(zx_handle_t handle, uint32_t bar_num, zx_pci_bar_t* out_bar, zx_handle_t* out_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_GET_BAR, 4, handle, bar_num, out_bar, out_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_map_interrupt(zx_handle_t handle, int32_t which_irq, zx_handle_t* out_handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_MAP_INTERRUPT, 3, handle, which_irq, out_handle);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_query_irq_mode(zx_handle_t handle, uint32_t mode, uint32_t* out_max_irqs)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_QUERY_IRQ_MODE, 3, handle, mode, out_max_irqs);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_set_irq_mode(zx_handle_t handle, uint32_t mode, uint32_t requested_irq_count)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_SET_IRQ_MODE, 3, handle, mode, requested_irq_count);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_init(zx_handle_t handle, zx_pci_init_arg_t* init_buf, uint32_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_INIT, 3, handle, init_buf, len);
    return seL4_GetMR(0);
}

zx_status_t zx_pci_add_subtract_io_range(zx_handle_t handle, bool mmio, uint64_t base, uint64_t len, bool add)
{
    ZX_SYSCALL_SEND(ZX_SYS_PCI_ADD_SUBTRACT_IO_RANGE, 5, handle, mmio, base, len, add);
    return seL4_GetMR(0);
}

uint64_t zx_acpi_uefi_rsdp(zx_handle_t handle)
{
    ZX_SYSCALL_SEND(ZX_SYS_ACPI_UEFI_RSDP, 1, handle);
    return seL4_GetMR(0);
}

zx_status_t zx_resource_create(zx_handle_t parent_handle, uint32_t kind, uint64_t low, uint64_t high, zx_handle_t* resource_out)
{
    ZX_SYSCALL_SEND(ZX_SYS_RESOURCE_CREATE, 5, parent_handle, kind, low, high, resource_out);
    return seL4_GetMR(0);
}

zx_status_t zx_guest_create(zx_handle_t resource, uint32_t options, zx_handle_t physmem_vmo, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_GUEST_CREATE, 4, resource, options, physmem_vmo, out);
    return seL4_GetMR(0);
}

zx_status_t zx_guest_set_trap(zx_handle_t guest, uint32_t kind, zx_vaddr_t addr, size_t len, zx_handle_t port, uint64_t key)
{
    ZX_SYSCALL_SEND(ZX_SYS_GUEST_SET_TRAP, 6, guest, kind, addr, len, port, key);
    return seL4_GetMR(0);
}

zx_status_t zx_vcpu_create(zx_handle_t guest, uint32_t options, zx_vaddr_t entry, zx_handle_t* out)
{
    ZX_SYSCALL_SEND(ZX_SYS_VCPU_CREATE, 4, guest, options, entry, out);
    return seL4_GetMR(0);
}

zx_status_t zx_vcpu_resume(zx_handle_t vcpu, zx_port_packet_t* packet)
{
    ZX_SYSCALL_SEND(ZX_SYS_VCPU_RESUME, 2, vcpu, packet);
    return seL4_GetMR(0);
}

zx_status_t zx_vcpu_interrupt(zx_handle_t vcpu, uint32_t vector)
{
    ZX_SYSCALL_SEND(ZX_SYS_VCPU_INTERRUPT, 2, vcpu, vector);
    return seL4_GetMR(0);
}

zx_status_t zx_vcpu_read_state(zx_handle_t vcpu, uint32_t kind, void* buffer, uint32_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_VCPU_READ_STATE, 4, vcpu, kind, buffer, len);
    return seL4_GetMR(0);
}

zx_status_t zx_vcpu_write_state(zx_handle_t vcpu, uint32_t kind, void* buffer, uint32_t len)
{
    ZX_SYSCALL_SEND(ZX_SYS_VCPU_WRITE_STATE, 4, vcpu, kind, buffer, len);
    return seL4_GetMR(0);
}

zx_status_t zx_system_mexec(zx_handle_t kernel, zx_handle_t bootimage)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSTEM_MEXEC, 2, kernel, bootimage);
    return seL4_GetMR(0);
}

zx_status_t zx_system_powerctl(zx_handle_t root_rsrc, uint32_t cmd, zx_system_powerctl_arg_t* arg)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSTEM_POWERCTL, 3, root_rsrc, cmd, arg);
    return seL4_GetMR(0);
}

zx_status_t zx_job_set_relative_importance(zx_handle_t root_resource, zx_handle_t job, zx_handle_t less_important_job)
{
    ZX_SYSCALL_SEND(ZX_SYS_JOB_SET_RELATIVE_IMPORTANCE, 3, root_resource, job, less_important_job);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_0(void)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_0, 0);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_1(int a)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_1, 1, a);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_2(int a, int b)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_2, 2, a, b);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_3(int a, int b, int c)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_3, 3, a, b, c);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_4(int a, int b, int c, int d)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_4, 4, a, b, c, d);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_5(int a, int b, int c, int d, int e)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_5, 5, a, b, c, d, e);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_6(int a, int b, int c, int d, int e, int f)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_6, 6, a, b, c, d, e, f);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_7(int a, int b, int c, int d, int e, int f, int g)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_7, 7, a, b, c, d, e, f, g);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_8(int a, int b, int c, int d, int e, int f, int g, int h)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_8, 8, a, b, c, d, e, f, g, h);
    return seL4_GetMR(0);
}

zx_status_t zx_syscall_test_wrapper(int a, int b, int c)
{
    ZX_SYSCALL_SEND(ZX_SYS_SYSCALL_TEST_WRAPPER, 3, a, b, c);
    return seL4_GetMR(0);
}
